# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-04-05 20:18
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):
    """A data migration to create initial Issues
    """

    def create_initial_issues(apps, schema_editor):
        IssueCategory = apps.get_model('medeina', 'IssueCategory')
        Issue = apps.get_model('medeina', 'Issue')
        User = apps.get_model('auth', 'User')
        superuser = User.objects.get(username='superuser')

        # these are created during previous data migration, but still, for the
        # sake of safety we're checking if they exist:
        bug_category = IssueCategory.objects.filter(name='bug').first()
        enhancement_category = IssueCategory.objects.filter(
            name='enhancement'
        ).first()
        documentation_category = IssueCategory.objects.filter(
            name='documentation'
        ).first()
        proposal_category = IssueCategory.objects.filter(
            name='proposal'
        ).first()
        task_category = IssueCategory.objects.filter(name='task').first()

        if bug_category:
            i = Issue.objects.create(
                title='Fix a bug with client data',
                status='open',
                submitter=superuser,
                text_description="For some of the clients 'address' field is "
                                 "invalid, someone has to look into it",
                category=bug_category,
            )

            print("\nCreated initial issue: '{0}'".format(i.title))

        if enhancement_category:
            i = Issue.objects.create(
                title='Javascript graphs should display circle diagrams',
                status='open',
                submitter=superuser,
                text_description="It would be nice if Javascript graphs would "
                                 "display circle diagrams as well. Maybe D3 "
                                 "library can be used for that? ",
                category=enhancement_category,
            )

            print("\nCreated initial issue: '{0}'".format(i.title))

        if documentation_category:
            i = Issue.objects.create(
                title="Client's project needs proper separate documentation",
                status='open',
                submitter=superuser,
                text_description="One of our clients requires proper "
                                 "documentation for one of his projects. "
                                 "Might be wise to look into readthedocs.org ",
                category=documentation_category,
            )

            print("\nCreated initial issue: '{0}'".format(i.title))

        if proposal_category:
            i = Issue.objects.create(
                title="It might be a good idea to use Slack",
                status='open',
                submitter=superuser,
                text_description="It might be a good idea for our team to use "
                                 "Slack instead of Hipchat. It's much more "
                                 "user-friendly and has some interesting API "
                                 "integrations",
                category=proposal_category,
            )

            print("\nCreated initial issue: '{0}'".format(i.title))

        if task_category:
            i = Issue.objects.create(
                title="Data export (measurements)",
                status='open',
                submitter=superuser,
                text_description="One of our clients asked us to make a data "
                                 "export of our existing solar radiation "
                                 "measurements for the past 3 months ",
                category=task_category,
            )

            print("\nCreated initial issue: '{0}'".format(i.title))

    def remove_initial_issues(apps, schema_editor):
        # XXX: theoretically speaking, when initial Issues are created, the
        # data could be exported to a .csv file and then later used in this
        # reverse migration to remove it, but because of task's scope we're
        # just not removing the Issues in reverse data migration:
        pass

    dependencies = [
        ('medeina', '0005_create_initial_users'),
    ]

    operations = [
        migrations.RunPython(
            create_initial_issues,
            remove_initial_issues
        ),
    ]
